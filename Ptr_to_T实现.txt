/*######################################################################

							Ptr_to_T实现
					模拟指针的功能但附加区间检查功能
					
######################################################################*/

//注：
	//1.++/--前缀与后缀运算符写法上的区别

//总结：
	//较好的完成了对指针的模拟任务并且完成了对指针区间范围合法性的检验




/*----------------------------------------------------------------------

Ptr_to_T.h

----------------------------------------------------------------------*/

#ifndef __PTR_TO_T_H_
#define __PTR_TO_T_H_

#include <iostream>

namespace Ptr//
{
    class Range{};
    class Ptr_to_T//char*
    {
        char* p;
        char* const array;//保存传来指针的起始位置
        int size;
    public:
        void check(int i)
        {
            if(p+i<array || p+i>array+size)
                throw Range();
        }
        //与传来的指针指向一致并没有开辟新空间也就不需要利用delete
        Ptr_to_T(char* pin,char* v,int s):p(pin),array(v),size(s){}
        Ptr_to_T(char* pin):p(pin),array(pin),size(1){}

        Ptr_to_T& operator++()
        {
            check(1);
            p+=1;
            return *this;//引用传递
        }
        Ptr_to_T operator++(int)
        {
            Ptr_to_T temp=*this;
            check(1);
            p+=1;
            return temp;//返回局部变量，值传递
        }

        Ptr_to_T& operator--()
        {
            check(-1);
            p-=1;
            return *this;
        }
        Ptr_to_T operator--(int)////
        {
            Ptr_to_T temp=*this;
            check(-1);
            p-=1;
            return temp;//
        }

        char& operator*()
        {
            return *p;
        }
        char* operator->();//char*此函数无用
        char& operator[](int i)
        {
            check(i);
            return *(p+i);
        }

        Ptr_to_T& operator+(int i)
        {
            check(i);
            p+=i;
            return *this;
        }

        Ptr_to_T& operator=(Ptr_to_T& ptr)
        {
            /*if(*this==ptr)
                return *this;
            delete this->array;*/
            return ptr;
        }
        Ptr_to_T& operator=(char c)
        {
            *p=c;
            return *this;
        }
        friend std::ostream& operator<<(std::ostream& out,Ptr_to_T& ptr);
    };
    Ptr_to_T& operator+(int i,Ptr_to_T& ptr)////
    {
        return ptr+i;
    }

    std::ostream& operator<<(std::ostream& out,Ptr_to_T& ptr)
    {
        out<<ptr.p;
        return out;
    }
    //*.cpp

};

#endif // __PTR_TO_T_H_




/*----------------------------------------------------------------------

main.cpp//测试程序

----------------------------------------------------------------------*/

#include "Ptr_to_T.h"
#include <string.h>
#include <iostream>

using namespace Ptr;
using std::cout;
using std::cin;
using std::endl;

int main()
{
    //Ptr_to_T
    char v[200]={0};
    strcpy(v,"test_const_cstr");
    Ptr_to_T p(&v[0],v,strlen(v));
    try
    {
        Ptr_to_T temp1=p++;
        //--p;
        //*p='a';
        *temp1='a';
        cout<<temp1<<' '<<p<<endl;
        p[5]='d';
        cout<<temp1<<' '<<p<<endl;
        cout<<v<<endl;
    }
    catch(Range)
    {
        cout<<"Error: bad range!"<<endl;
    }
    ++p;
    p=10+p;
    *p='a';
    try
    {
        cout<<v<<'\t';
        p[1]='c';////
        cout<<p<<endl;
    }
    catch(Range)
    {
        cout<<"Error: bad range!"<<endl;
    }

    cout<<endl;

    //char *
    char u[200]={0};
    strcpy(u,"test_const_cstr");
    char * pCh=&u[0];
    char *temp2=pCh++;
    *temp2='a';
    cout<<temp2<<' '<<pCh<<endl;
    pCh[5]='d';
    cout<<temp2<<' '<<pCh<<endl;
    cout<<u<<endl;

    ++pCh;
    pCh=10+pCh;
    *pCh='a';
    cout<<u<<'\t';
    //pCh[10000]='c';////
    cout<<pCh<<endl;
    return 0;
}


